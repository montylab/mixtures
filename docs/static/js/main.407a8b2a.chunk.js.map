{"version":3,"sources":["Tube.js","App.js","reportWebVitals.js","index.js"],"names":["Tube","layers","selected","onClick","withEmpties","length","push","className","map","color","index","levels","App","useState","JSON","parse","stringify","tubes","setTubes","setSelected","isLevelComplete","setLevelComplete","currentLevelIndex","setCurrentLevelIndex","level","colorsCount","Math","ceil","random","levelString","i","toString","repeat","levelArray","split","sort","tubeIndex","floor","from","to","pop","reduce","acc","tube","every","manipulateTubes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.407a8b2a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Tube({layers = [], selected = false, onClick}) {\n    const withEmpties = [...layers]\n    while (withEmpties.length < 4) {\n        withEmpties.push(0)\n    }\n    return (\n        <div\n            className={`tube ${selected ? 'selected' : ''}`}\n            onClick={onClick}\n        >\n            {withEmpties.map((color, index) => <div className={'layer color-' + color} key={index}/>)}\n        </div>\n    );\n}\n\nexport default Tube;\n","import './App.css';\nimport Tube from \"./Tube\";\nimport React, {useState} from \"react\";\n\nconst levels = [\n    [\n        [1, 1, 1, 4],\n        [4, 4, 4, 1],\n        [2, 2, 2, 2],\n        [3, 3, 3, 3],\n        [],\n        []\n    ],\n    [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [],\n        []\n    ],\n    [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [5, 6, 6, 5],\n        [6, 6, 5, 5],\n        [],\n        []\n    ]\n]\n\nconst checkLevelCompletion = (level) => {\n    return level.reduce((acc, tube) => {\n        return acc && tube.length % 4 === 0 && tube.every(color => color === tube[0])\n    }, true)\n}\n\nfunction App() {\n    const [tubes, setTubes] = useState(JSON.parse(JSON.stringify(levels[0])))\n    const [selected, setSelected] = useState(-1)\n    const [isLevelComplete, setLevelComplete] = useState(false)\n    const [currentLevelIndex, setCurrentLevelIndex] = useState(0)\n\n    const manipulateTubes = (index) => {\n        if (selected === -1) {\n            setSelected(index)\n        } else {\n            if (index !== selected) {\n                const from = tubes[selected]\n                const to = tubes[index]\n\n                while (\n                    from.length !== 0 && to.length !== 4\n                    && (from[from.length - 1] === to[to.length - 1] || to.length === 0)\n                    ) {\n                    to.push(from.pop())\n                }\n\n                setTubes(tubes)\n            }\n\n            setSelected(-1)\n        }\n\n        if (checkLevelCompletion(tubes)) {\n            setLevelComplete(true)\n        }\n    }\n\n    const setupNextLevel = () => {\n        setTubes(JSON.parse(JSON.stringify(levels[currentLevelIndex + 1])))\n        setLevelComplete(false)\n        setSelected(-1)\n        setCurrentLevelIndex(currentLevelIndex + 1)\n    }\n\n    const setupRandom = () => {\n        const level = []\n        const colorsCount = 4 + Math.ceil(Math.random() * 7)\n        let levelString = ''\n        for (let i=1; i<=colorsCount; i++) {\n            levelString += i.toString().repeat(4)\n        }\n        const levelArray = levelString\n            .split('')\n            .sort(() => Math.random() - 0.5)\n\n        for (let i=0; i<colorsCount*4; i++) {\n            const tubeIndex = Math.floor(i/4)\n            level[tubeIndex] = level[tubeIndex] || []\n            level[tubeIndex].push(levelArray[i])\n        }\n\n        level.push([], [])\n\n        setTubes(level)\n        setLevelComplete(false)\n        setSelected(-1)\n        setCurrentLevelIndex(currentLevelIndex + 1)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"header\">\n                <h1>Level: {currentLevelIndex + 1} {isLevelComplete && ' - completed!'}</h1>\n                <button\n                    onClick={() => setTubes(JSON.parse(JSON.stringify(levels[currentLevelIndex])))}\n                    className=\"restartBtn\">\n                    Restart Level\n                </button>\n                <button\n                    onClick={setupRandom}\n                    className=\"restartBtn\">\n                    Setup Random Level\n                </button>\n\n                {isLevelComplete && levels[currentLevelIndex+1] && <button\n                    onClick={setupNextLevel}\n                    className=\"nextLevelBtn\">\n                    Next  Level\n                </button>}\n            </div>\n            <div className=\"level\">\n                {tubes.map((layers, index) => (\n                    <Tube\n                        layers={layers}\n                        selected={index === selected}\n                        onClick={() => manipulateTubes(index)}\n                        key={index}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}