{"version":3,"sources":["Tube.js","levels.js","App.js","reportWebVitals.js","index.js"],"names":["Tube","layers","selected","hovered","onClick","withEmpties","length","push","className","map","color","index","checkLevelCompletion","require","level","reduce","acc","tube","every","console","time","timeEnd","levels","App","useState","JSON","parse","stringify","tubes","setTubes","setSelected","arrowPosition","setArrowPosition","isLevelComplete","setLevelComplete","currentLevelIndex","setCurrentLevelIndex","manipulateTubes","from","to","pop","window","onkeydown","throttle","e","pos","key","log","isNaN","colors","colorsCount","Math","ceil","random","levelString","i","toString","repeat","levelArray","split","sort","tubeIndex","floor","generateLevel","clickTubeHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc74a2f1.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Tube({layers = [], selected = false, hovered = false, onClick}) {\n    const withEmpties = [...layers]\n    while (withEmpties.length < 4) {\n        withEmpties.push(0)\n    }\n    return (\n        <div className={`tubeWrapper ${selected ? 'selected' : ''} ${hovered ? 'hovered' : ''}`}>\n            <div\n                className={`tube`}\n                onClick={onClick}\n            >\n                {withEmpties.map((color, index) => <div className={'layer color-' + color} key={index}/>)}\n            </div>\n            <div className=\"arrow\" />\n        </div>\n    );\n}\n\nexport default Tube;\n","const clone = require('rfdc')()\n\nexport const levels = [\n    [\n        [ 1, 2, 6, 9 ],   [ 12, 5, 11, 5 ],\n        [ 12, 12, 7, 3 ], [ 8, 11, 10, 10 ],\n        [ 7, 11, 4, 4 ],  [ 1, 11, 2, 4 ],\n        [ 9, 4, 8, 8 ],   [ 5, 9, 5, 10 ],\n        [ 6, 1, 7, 6 ],   [ 7, 3, 6, 9 ],\n        [ 2, 3, 8, 12 ],  [ 3, 1, 10, 2 ],\n        [],               []\n    ],\n    [\n        [9, 4, 12, 12], [5, 11, 1, 3],\n        [3, 9, 10, 2], [9, 1, 9, 5],\n        [6, 7, 8, 7], [11, 1, 4, 2],\n        [4, 6, 5, 7], [7, 4, 3, 2],\n        [12, 2, 5, 8], [6, 8, 1, 10],\n        [10, 11, 6, 10], [12, 3, 11, 8],\n        [], []\n    ],\n    [\n        [5, 1, 11, 5], [1, 2, 1, 10],\n        [4, 8, 11, 6], [7, 5, 11, 7],\n        [10, 3, 9, 6], [5, 11, 8, 10],\n        [3, 7, 9, 4], [4, 7, 2, 9],\n        [6, 8, 2, 6], [3, 10, 8, 3],\n        [1, 4, 9, 2], [],\n        []\n    ],\n    [\n        [1, 1, 1, 4],\n        [4, 4, 4, 1],\n        [2, 2, 2, 2],\n        [3, 3, 3, 3],\n        [],\n        []\n    ],\n    [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [],\n        []\n    ],\n    [\n        [],\n        [1],\n        [2, 1, 1, 1],\n        [2, 2, 2],\n        [3, 3, 3, 3],\n        [4, 4, 4, 4]\n    ],\n    [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [5, 6, 6, 5],\n        [6, 6, 5, 5],\n        [],\n        []\n    ],\n    [\n        [1, 3, 2, 1],\n        [6, 5, 5, 4],\n        [9, 7, 5, 9],\n        [2, 3, 4, 6],\n        [5, 4, 8, 2],\n        [8, 1, 3, 7],\n        [7, 1, 3, 4],\n        [7, 2, 8, 9],\n        [9, 6, 6, 8],\n        [],\n        []\n    ],\n]\n\nexport const generateLevel = (colors = 11) => {\n    const level = []\n    const colorsCount = 4 + Math.ceil(Math.random() * colors - 4)\n    let levelString = ''\n    for (let i = 1; i <= colorsCount; i++) {\n        levelString += i.toString().repeat(4)\n    }\n    const levelArray = levelString\n        .split('')\n        .sort(() => Math.random() - 0.5)\n\n    for (let i = 0; i < colorsCount * 4; i++) {\n        const tubeIndex = Math.floor(i / 4)\n        level[tubeIndex] = level[tubeIndex] || []\n        level[tubeIndex].push(levelArray[i])\n    }\n\n    level.push([], [])\n\n    return level\n}\n\nexport const checkLevelCompletion = (level) => {\n    return level.reduce((acc, tube) => {\n        return acc && tube.length % 4 === 0 && tube.every(color => color === tube[0])\n    }, true)\n}\n\n\nconst getActionIfPossible = (tubes, fromIndex, toIndex) => {\n    let layers = 0\n\n    if (fromIndex !== toIndex) {\n        const maxLayersToReceive = 4 - tubes[toIndex].length\n        const originLastIndex = tubes[fromIndex].length - 1\n        let maxLayersToMove = 0\n\n        if (\n            (tubes[fromIndex][tubes[fromIndex].length - 1] === tubes[toIndex][tubes[toIndex].length - 1])\n            || tubes[toIndex].length === 0\n        ) {\n            maxLayersToMove = 1\n            if (tubes[fromIndex][originLastIndex] === tubes[fromIndex][originLastIndex - 1]) {\n                maxLayersToMove = 2\n                if (tubes[fromIndex][originLastIndex] === tubes[fromIndex][originLastIndex - 2]) {\n                    maxLayersToMove = 3\n                }\n            }\n        }\n\n        layers = Math.min(maxLayersToMove, maxLayersToReceive)\n\n        //tubes[fromIndex].join('').\n\n        // const from = [...tubes[fromIndex]]\n        // const to = [...tubes[toIndex]]\n        //\n        // while (\n        //     from.length !== 0 && to.length !== 4\n        //     && (from[from.length - 1] === to[to.length - 1] || to.length === 0)\n        //     ) {\n        //     to.push(from.pop())\n        //     layers++\n        // }\n    }\n\n    return layers && {from: fromIndex, to: toIndex, layers}\n}\n\nconst applyActionToLevel = ({from, to, layers}, level) => {\n    const updated = clone(level) //JSON.parse(JSON.stringify(level))\n    for (let i = 0; i < layers; i++) {\n        updated[to].push(updated[from].pop())\n    }\n\n    return updated\n}\n\nconst isActionDumb = (level, {from, to, layers}) => {\n    if (!layers) {\n        return true\n    }\n\n    // from all layers from one to empty tube\n    if (level[to].length === 0 && layers === level[from].length) {\n        return true\n    }\n\n    const color = level[from][level[from].length - 1]\n\n    // move not all layers of same color\n    if (level[from][level[from].length - layers - 1] === color) {\n        return true\n    }\n\n    // if two empties, do not use second\n    const emptyTubes = level.filter(tube => tube.length === 0)\n    if (emptyTubes[1] === level[to]) {\n        return true\n    }\n\n    // if action is move layer to empty tube, when exists tube with all layers of the same color\n    //const emptyTubes = level.filter(tube => tube.length === 0)\n    const sameColorTubes = level.filter(\n        tube => tube.length && tube.every(layer => layer === color)\n    )\n    if (level[to].length === 0 && sameColorTubes.length) {\n        return true\n    }\n\n    return false\n}\n\nlet showFirst = 20\nlet totalCalls = 0\nexport const findLevelSolution = (level, previousActions = []) => {\n    totalCalls++\n    if (previousActions.length === 30) {\n        //console.log(JSON.stringify(previousActions))\n        //console.count('not found')\n\n        if (totalCalls % 1000000 === 0) {\n            console.log(JSON.stringify(previousActions))\n        }\n\n        return []\n    }\n\n    const solutions = []\n\n    const levelLength = level.length\n    for (let from = 0; from < levelLength; from++) {\n        for (let to = 0; to < levelLength; to++) {\n            const action = getActionIfPossible(level, from, to)\n\n            if (!action || isActionDumb(level, action)) {\n                continue\n            }\n            const updatedLevel = applyActionToLevel(action, level)\n            const isComplete = checkLevelCompletion(updatedLevel)\n            const actionsQueue = [...previousActions, action]\n\n            if (isComplete) {\n                solutions.push(actionsQueue)\n                if (solutions.length > 1000) {\n                    return solutions\n                }\n            }\n\n            const childSolutions = findLevelSolution(updatedLevel, [...previousActions, action])\n            solutions.push(...childSolutions)\n        }\n    }\n\n    return solutions\n}\n\n\nconsole.time()\n// const solutions = findLevelSolution(levels[4])\n// console.log(solutions, totalCalls)\nconsole.timeEnd()","import './App.css';\nimport Tube from \"./Tube\";\nimport React, {useEffect, useState} from \"react\";\nimport {checkLevelCompletion, generateLevel} from \"./levels.js\";\nimport {throttle} from \"throttle-debounce\";\n\nconst levels = require('./levels-setup.json');\n\nfunction App() {\n    const [tubes, setTubes] = useState(JSON.parse(JSON.stringify(levels[0])))\n    const [selected, setSelected] = useState(-1)\n    const [arrowPosition, setArrowPosition] = useState(-1)\n    const [isLevelComplete, setLevelComplete] = useState(false)\n    const [currentLevelIndex, setCurrentLevelIndex] = useState(0)\n\n    const manipulateTubes = (index) => {\n        if (selected === -1) {\n            setSelected(index)\n        } else {\n            if (index !== selected) {\n                const from = tubes[selected]\n                const to = tubes[index]\n\n                while (\n                    from.length !== 0 && to.length !== 4\n                    && (from[from.length - 1] === to[to.length - 1] || to.length === 0)\n                    ) {\n                    to.push(from.pop())\n                }\n\n                setTubes(tubes)\n            }\n\n            setSelected(-1)\n        }\n\n        if (checkLevelCompletion(tubes)) {\n            setLevelComplete(true)\n        }\n    }\n\n    const setupNextLevel = () => {\n        setTubes(JSON.parse(JSON.stringify(levels[currentLevelIndex + 1])))\n        setLevelComplete(false)\n        setSelected(-1)\n        setCurrentLevelIndex(currentLevelIndex + 1)\n    }\n\n    const setupRandom = () => {\n        const level = generateLevel()\n        levels.push(level)\n        setTubes(level)\n        setLevelComplete(false)\n        setSelected(-1)\n        setCurrentLevelIndex(levels.length - 1)\n    }\n\n    const keyupHandler = (e) => {\n        if (!e) return\n\n        let pos\n        if (e.key === 'ArrowRight') {\n            pos = arrowPosition + 1\n        } else if (e.key === 'ArrowLeft') {\n            pos = arrowPosition - 1\n        } else if (e.key === 'Enter') {\n            if (selected === -1) {\n                setSelected(arrowPosition)\n            } else if (arrowPosition === selected) {\n                setSelected(-1)\n            } else {\n                console.log('helloy')\n                manipulateTubes(arrowPosition)\n            }\n\n            return\n        }\n\n        if (pos > tubes.length - 1) {\n            pos = 0\n        } else if (pos < 0) {\n            pos = tubes.length - 1\n        }\n\n        setArrowPosition(!isNaN(pos) ? pos : -1)\n    }\n\n    // rewrite every render to have binding to setState\n    window.onkeydown = throttle(100, false, keyupHandler)\n    window.onkeydown()\n\n    const clickTubeHandler = (index) => {\n        setArrowPosition(-1)\n        manipulateTubes(index)\n        console.log(index)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"header\">\n                <h1>Level: {currentLevelIndex + 1} {isLevelComplete && ' - completed!'}</h1>\n                <button\n                    onClick={() => setTubes(JSON.parse(JSON.stringify(levels[currentLevelIndex])))}\n                    className=\"restartBtn\">\n                    Restart Level\n                </button>\n                <button\n                    onClick={setupRandom}\n                    className=\"restartBtn\">\n                    Setup Random Level\n                </button>\n\n                {1 && levels[currentLevelIndex+1] && <button\n                    onClick={setupNextLevel}\n                    className=\"nextLevelBtn\">\n                    Next  Level\n                </button>}\n            </div>\n            <div className=\"level\">\n                {tubes.map((layers, index) => (\n                    <Tube\n                        layers={layers}\n                        selected={index === selected}\n                        hovered={index === arrowPosition}\n                        onClick={() => clickTubeHandler(index)}\n                        key={index}\n                    />\n                ))}\n            </div>\n\n            {arrowPosition} - {selected}\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}